split :: String -> String -> [String]
split [] [] = []
split [] x = x:(split [] [])
split (' ':body) [] = split body []
split ('\n':body) [] = split body []
split (' ':body) x = x:(split body [])
split ('\n':body) x = x:(split body [])
split (head:body) x
    | (x == "program") = x:(split (head:body) [])
    | (x == "begin") = x:(split (head:body) [])
    | (x == "end") = x:(split (head:body) [])
    | (x == "const") = x:(split (head:body) [])
    | (x == "type") = x:(split (head:body) [])
    | (x == "var") = x:(split (head:body) [])
    | (x == "array") = x:(split (head:body) [])
    | (x == "of") = x:(split (head:body) [])
    | (x == "record") = x:(split (head:body) [])
    | (x == "procedure") = x:(split (head:body) [])
    | (x == "integer") = x:(split (head:body) [])
    | (x == "real") = x:(split (head:body) [])
    | (x == "while") = x:(split (head:body) [])
    | (x == "if") = x:(split (head:body) [])
    | (x == "then") = x:(split (head:body) [])
    | (x == "write") = x:(split (head:body) [])
    | (x == "read") = x:(split (head:body) [])
    | (x == "else") = x:(split (head:body) [])
    | (x == ":=") = x:(split (head:body) [])
    | (head == '(') = x:[head]:(split body []) -- head == char  ; [head] == string
    | (head == ')') = x:[head]:(split body [])
    | (head == '[') = x:[head]:(split body [])
    | (head == ']') = x:[head]:(split body [])
    | (head == '=') = x:[head]:(split body [])
    | (head == '+') = x:[head]:(split body [])
    | (head == '-') = x:[head]:(split body [])
    | (head == '*') = x:[head]:(split body [])
    | (head == '/') = x:[head]:(split body [])
    | (head == ';') = x:[head]:(split body [])
    | (head == '"') = x:[head]:(split body [])
    | (head == ',') = x:[head]:(split body [])
    | (head == '>') = x:[head]:(split body [])
    | (head == '<') = x:[head]:(split body [])
    | (head == '!') = x:[head]:(split body [])
    | (head == '.') = x:[head]:(split body [])
    | otherwise = split body (x ++ [head])

--split "    if (55<58) then     write8  procedure false fal se" ""